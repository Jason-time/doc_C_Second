1. C프로그래밍 입문
	1.1 C언어 소개
	1.2 실습환경 구성(Visual Studio)
	1.3 첫 번째 예제, HelloWorld!
	1.4 프로그램의 기본 요소
	1.4.1 #include 전처리기
	1.4.2 스코프(Scope)와 구문
	1.4.3 함수
	1.4.4 빌드 타임에 벌어지는 일들

	#include<stdio.h>

int main(void) {

	printf("Hello, World!\n");
	return 0;
}
/*/================================//
 p.027 - First code
//================================/*/

2. 자료형
	2.1 변수와 상수
	2.1.1 C언어의 자료형
	2.1.2 보수와 음수 표현
	2.1.3 부호비트와 자료비트 그리고 표현범위
	2.2 정수 자료형과 변수, 상수
	2.2.1 char와 ASCII코드
	2.2.2 short, wchar_t
	2.2.3 int와 long
	2.3 실수 자료형
	2.3.1 float
	2.3.2 double
	2.4 문자와 문자(배)열
	2.5 이름과 주석문
	2.5.1 이름 짓기와 식별자
	2.5.2 주석문

#include<stdio.h>

int main(void) {

	char ch = 'A';
	wchar_t wch = L'A';
	short sData = 10;
	int nData = 10;
	long lData = 10L;
	long int lnData = 10L;
	long long int llnData = 10LL;

	unsigned char byNewData = 0;
	unsigned short sNewData = 65535U;
	unsigned int uNewData = 1U;
	unsigned long int ulNewData = 1UL;
	unsigned long long int ullNewData = 1ULL;

	return 0;
}
/*/================================//
 p.045 - integer01.c
//================================/*/

#include<stdio.h>
#include<float.h>

int main(void) {

	double dDataa = 123.456;

	printf("%f\n", dDataa);
	printf("%E - %E\n", DBL_MIN, DBL_MAX);

	return 0;
}
/*/================================//
 p.050 - DoubleRange.c
//================================/*/

#include<stdio.h>

int main(void) {

	char ch1 = 'A', ch2 = 'B', ch3 = 'C';
	char szData[4] = { 'A','B','C' };
	char szNewData[4] = { "ABC" };
	return 0;
}
/*/================================//
 p.051 - String01.c
//================================/*/

#include<stdio.h>

	/*
	이 구간의 코드는 모두 주석문입니다.
	*/

int main(void) {

	//결과를 저장하는 변수입니다.
	int nResult = 10;
	char ch = 'A';	//사용자 입력

	//printf("Hello, World!\n");
	return 0;
}
/*/================================//
 p.054 - Comment01.c
//================================/*/

3. 표준 입출력 도구
	3.1 문자 입출력
	3.1.1 getchar() / putchar()함수
	3.1.2 _getch() / _getche()함수
	3.2 문자열 입출력
	3.2.1 gets() / puts()함수
	3.2.2 gets() 함수와 보안 결함
	3.3 printf() 함수
	3.3.1 형식 문자와 이스케이프 시퀀스
	3.3.2 문자와 정수 출력
	3.3.3 실수와 지수 출력
	3.4 scanf()함수
	3.4.1 정수 입력
	3.4.2 두 정수의 입력 및 구분
	3.4.3 문자 입력
	3.4.4 문자열 입력

#include<stdio.h>

int main(void) {

	//자료형이 char 형식이고 이름이 ch인 변수의 선언 및 정의
	char ch = 0;
	
	//getchar() 함수가 반환한 값을 ch 변수에 저장한다.
	if ((ch = getchar()) < 1)
		printf("정상적으로 입력하지 않았습니다."); 
	//변수 ch 에 담겨 있는 정보를 화면에 출력한다.
	putchar(ch);
	//대문자 Z를 화면에 출력한다.
	putchar('Z');
	//0을 반환하고 main() 함수가 반환한다. (프로그램 종료)
	return 0;
}
/*/================================//
 p.059 - getchar01.c
//================================/*/

#include<stdio.h>
//_getch() 함수를 사용하기 위한 헤더 파일 포함
#include<conio.h>

int main(void) {

	char ch = 0;
	//사용자에게 전달할 메시지 (문자열) 출력
	printf("아무 키나 누르면 다음으로 넘어갑니다. \n");
	//사용자로부터 키보드 입력을 한 번 받는다. 사용자가 입력한 값을
	//_getch() 함수가 반환하면 이를 ch변수에 저장한다.
	ch = _getch();
	
	//사용자가 입력한 문자를 출력한다.
	printf("입력한 키는 ");
	putchar(ch);
	printf("입니다.\n");

	return 0;
}
/*/================================//
 p.062 - getch01.c
//================================/*/

#include<stdio.h>

int main(void) {

	//char변수 32개가 한 덩어리로 묶인 배열 선언 및 정의
	char szname[32] = { 0 };

	//사용자로부터 이름(문자열)을 입력받는다.
	printf("이름을 입력하세요: ");
	//사용자가 입력한 문자들을 문자 배열에 모두 저정한다.
	gets_s(szname,sizeof(szname));
	
	//배열에 저장된 이름ㅇ르 화면에 출력한다.
	printf("당신의 이름은 ");
	puts(szname);
	puts("입니다.");

	return 0;
}
/*/================================//
 p.066 - gets01.c
//================================/*/

#include<stdio.h>

int main(void) {

	int x = 10;

	//문자상수를 화면에 출력한다.
	putchar('B');
	// '\n'은 개행문자이므로 알파벳 문자가 화면에 보이는 것이 아니다.
	putchar('\n');

	//앞서 개행문자가 출력됐으므로 A는 다음 행에 출력된다.
	printf("%c\n", 'A');

	//%d라는  형식 문자에 맞춰 변수 x에 담긴 정보를 출력한다.
	printf("x는 %d 입니다.\n", x);
	return 0;
}
/*/================================//
 p.071 - escseq01.c
//================================/*/

#include<stdio.h>

int main(void) {

	// 문자 상수를 ASCII코드 문자 형식으로 출력한다.
	printf("%c\n", 'A');
	// 문자 'A'의 ASCII 코드값(65)에 1을 더한 값을 문자로 출력한다.
	printf("%c\n", 'A' + 1);
	// 문자 상수를 ASCII코드 문자형식으로 출력한다.
	printf("%c\n", 'C');

	// 문자 'A'의 ASCII 코드값을 10진수(%d)로 출력한다.
	printf("%d\n", 'A');
	// 문자 'A'의 ASCII 코드값에 1을 더하고 10진수 (%d)로 출력한다.
	printf("%d\n", 'A' + 1);
	// 문자 'C'의 ASCII 코드값을 10진수(%d)로 출력한다.
	printf("%d\n", 'C');

	// 10진수(정수)를 문자(ASCII)로 출력한다.
	printf("%c\n", 65);
	printf("%c\n", 65 + 1);
	printf("%c\n", 67);
	return 0;
}
/*/================================//
 p.075 - charint01.c
//================================/*/

#include<stdio.h>

int main(void) {

	//int형 상수 10을 10진 (부호가 있는) 정수형식으로 출력한다.
	printf("%d\n", 10);
	//10을 '부호가 없는' 정수형식으로 출력한다.
	printf("%u\n", 10);
	//unsigned int 형 상수 10U을 %d형식으로 출력한다.
	printf("%d\n", 10U);
	//unsigned int형 상수를 %u 형식으로 출력한다.
	printf("%u\n", 10U);

	//부호가 있는 32비트 정수로 표현할 수 있는 가장 큰 수를 출력한ㄴ다.
	printf("%d\n", 2147483647);
	//부호가 있는 32비트 '범위를 넘어선' 정수를 출력한다.
	printf("%d\n", 2147483648);
	//부호가 없는 32비트로 출력하므로 값이 제대로 출력된다.
	printf("%u\n", 2147483648);

	//-1을 부호가 있는 10진수 형식으로 출력한다.
	printf("%d\n", -1);
	//같은 값(-1)이지만 부호가 없는 형식으로 출력하면 전혀 다른 값이 된다.
	printf("%u\n", -1);
	return 0;
}
/*/================================//
 p.077 - intover01.c
//================================/*/

#include<stdio.h>

int main(void) {

	//부호가 있는 64비트 정수형 변수 선언 및 정의
	long long int lldData = 4294967295LL;

	//64비트 정보를 32비트로 형식 문자로 출력한다.
	printf("%d\n", lldData);
	printf("%u\n", lldData);

	//32비트로는 표현할 수 없는 범위의 정보를 출력해본다.
	//제대로 된 결과를 기대할 수 없다.
	printf("%u\n", lldData + 1);
	printf("%u\n", lldData + 2);
	printf("%u\n", lldData + 3);

	//64비트 정보를 64비트 형식 문자(%lld)로 출력한다.
	printf("%lld\n", lldData + 1);
	printf("%lld\n", lldData + 2);
	printf("%lld\n", lldData + 3);

	return 0;
}
/*/================================//
 p.078 - longlongint01.c
//================================/*/

#include<stdio.h>

int main(void) {

	//실수 자료 형식의 메모리 크기(바이트 단위)를 출력
	printf("%d\n", sizeof(123.456f));
	printf("%d\n", sizeof(123.456));

	//float 형식을 실수 형식으로 출력
	printf("%f\n", 123.456f);		// float

	//double 형식을 실수 형식으로 출력
	printf("%f\n", 123.456);		//double
	printf("%lf\n", 123.456);		//long double

	return 0;
}
/*/================================//
 p.082 - floatprint01.c
//================================/*/

#include<stdio.h>

int main(void) {

	printf("%f\n",
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F +
		0.1F + 0.1F + 0.1F + 0.1F + 0.1F 
	);

	return 0;
}
/*/================================//
 p.083 - floatacc01.c
//================================/*/

#include<stdio.h>

int main(void) {

	double dData = 123.456;
	printf("%f, %f\n", dData, -123.456);

	//소수점 2번째 자리에서 반올림하고 1자리까리 출력
	printf("%.1f\n", dData);
	//소수점 3번째 자리에서 반올림하고 2자리까지 출력
	printf("%.2f\n", dData);
	//소수점 4번째 자리에서 반올림하고 3자리까지 출력
	printf("%.3f\n", dData);

	printf("%8d\n", 123);
	//소수점을 포함해 12자리로 출력. 단, 소수점 이하 4번째 자리에서 
	//반올림하고 3자리까지 출력한다.
	printf("%12.3f\n", dData);
	printf("%012.3f\n", dData);


	return 0;
}
/*/================================//
 p.084 - floatformat01.c
//================================/*/

#include<stdio.h>

int main(void) {

	int nAge = 0;

	printf("나이를 입력하세요. : ");
	//사용자가 입력한 정보를 int 형식으로 해석하고 nAge 변수에 저장한다.
	//그리고 & 기혼는 주소 연산자이며
	//&nAge는 nAge변수의 주소라는 의미이다.
	scanf_s("%d", &nAge);

	printf("당신의 나이는 %d세 입니다. \n", nAge);
	return 0;
}
/*/================================//
 p.087 - scanfint01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {
	char cName[10];
	int nAge = 0;

	scanf("나이를 입력하세요. %d%*c", &nAge);
	printf("이름을 입력하세요. : ");
	gets(cName);

	printf("당신의 나이는 %d살이고 이름은 \'%s\'입니다.",nAge,cName);
	
	return 0;
}
/*/================================//
 p.088 - 03-01
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int x = 0, y = 0;

	printf("두 정수를 입력하세요. : ");
	//사용자로부터 두 정수를 입력받아 x와 y에 순서대로 저장한다.
	//%d와 %d 사이에 공백이 없다는 점에 주의한다!
	scanf("%d%d", &x, &y);

	//x와 y의 합을 출력한다.
	printf("두 수의 합은 %d 입니다. \n", x + y);

	return 0;
}
/*/================================//
 p.093 - scanfsepint01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	char ch = 0;
	scanf("%c", &ch);
	printf("입력한 문자는 %c 입니다.\n", ch);

	return 0;
}
/*/================================//
 p.094 - scanfchar01.c
//================================/*/
#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	//문자열을 저장하기 위한 배열 선언 및 정의
	char szBuffer[32] = { 0 };

	//사용자가 입력한 문자열을 배열에 저장하고 출력
	scanf("%s", szBuffer);
	printf("%s\n", szBuffer);

	return 0;
}
/*/================================//
 p.095 - scanfstring01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	char szBufferLeft[32] = { 0 };
	char szBufferRight[32] = { 0 };

	scanf("%s%s", szBufferLeft, szBufferRight);
	printf("%s %s\n", szBufferLeft, szBufferRight);

	return 0;
}
/*/================================//
 p.096 - scanfstring02.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	char sszName[32] = { 0 };
	int nAge = 0;

	//사용자로부터 정수를 입력받아 nAge 변수에 저장한다.
	printf("나이를 입력하세요.  : ");
	scanf("%d", &nAge);

	//이름 중간에 빈 공백이 있더라도 문제없이 입력할 수 있다. 
	printf("이름을 입력하세요. : ");
	gets(sszName);

	//이름과 나이를 출력한다.
	printf("%d, %s\n", nAge, sszName);

	return 0;
}
/*/================================//
 p.097 - scanfage01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	char szName[32] = { 0 };
	int nAge = 0;

	//사용자로부터 나이를 입력받는다.
	//이때, 입력의 완료를 의미하는 <Enter> 키(\n)입력이 버퍼에 남는다.
	printf("나이를 입력하세요. : ");
	scanf_s("%d%*c", &nAge);

	printf("이름을 입력하세요. : ");
	//버퍼 안에 남아있는 것들을 모두 비운 후 이름을 입력받는다.
	//따라서 개행문자(\n)가 제거된다.
	//fflush(stdin);
	//__fpurge(stdin);
	gets_s(szName, sizeof(szName));

	printf("%d, %s\n", nAge, szName);
	return 0;
}
/*/================================//
 p.099 - scanfage02.c
//================================/*/

4. 연산자 - 기본
	4.1 산술 연산자
	4.1.1 덧셈, 뺄셈 연산자
	4.1.2 이형자료 간의 연산 및 형승격
	4.1.3 곱셈, 나눗셈 연산자
	4.1.4 나머지 연산자
	4.2 대입 연산자
	4.2.1 단순 대입 연산자
	4.2.2 복합 대입 연산자
	4.3 형변환 연산자
	4.4 단항 증감 연산자
	4.5 비트 연산자
	4.5.1 비트 연산자의 사용
	4.5.2 마스크 연산

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nResult = 0;

	//1: 3+4
	//2: 7(임시결과) -5
	//3: nResult =2
	nResult = 3 + 4 - 5;
	printf("nResult : %d\n", nResult);
	return 0;
}
/*/================================//
 p.110 - operator01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nResult = 0;

	//임시결과 7을 변수에 담아둔다.
	nResult = 3 + 4;
	//변수에 담아둔 정보를 다시 꺼내 연산한다.
	printf("nResult : %d\n", nResult - 5);
	return 0;
}
/*/================================//
 p.112 - operator02.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	char ch = 'A';

	//char를 %c로 출력
	printf("%c\n", ch);

	//'char + int'는 int 형식이다.
	printf("%c\n", ch + 1);
	printf("%c\n", 'A' + 2);

	//'double + int'는 double 형식이다.
	//따라서 %d 형식으로 출력할 수 없다.
	printf("%d\n", 5.0 + 2);
	printf("%f\n", 5.0 + 2);
	return 0;
}
/*/================================//
 p.112 - TypePromotion.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int x = 10;
	//int * int -> %d
	printf("%d\n", x * 10);
	//int * double -> %d (출력 불가능)
	printf("%d\n", x * 10.0);

	//int / int는 int 형식이다. 실수 형식이 아니라는 저에 주의!
	//단, 소수점 이하는 절사된다.
	printf("%d\n", x / 10);

	//int / int 는 int 형식이므로 %f로 출력할 수 없다.
	printf("%d\n", 5 / 2);
	//소수점 이하가 절사되므로 사실상 정수 2를 %f로 출력하는 것이다.
	printf("%f\n", 5 / 2);

	//double / int 는 double 형식이다.
	printf("%f\n", 5.0 / 2);
	return 0;
}
/*/================================//
 p.114 - opdoubleint02.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nInput = 0;
	printf("정수를 입력하세요.: ");

	//사용자로부터 정수를 입력받는다.
	scanf("%d", &nInput);
		if (nInput == 0) {
			printf("0으로 나눌수는 없습니다. 종료합니다.\n");
			return 0; 
	}
	//만일 사용자가 0을 입력한다면 10을 0으로 나눠야 한다.
	printf("%d\n", 10 / nInput);
	return 0;
}
/*/================================//
 p.116 - opdividebyzero.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nInput1 = 0;
	int nInput2 = 0;
	printf("두 정수를 입력하세요.: ");

	//사용자로부터 정수를 입력받는다.
	scanf("%d%d", &nInput1,&nInput2);
	
	//만일 사용자가 0을 입력한다면 10을 0으로 나눠야 한다.
	printf("AVG : %.2f\n", (nInput1+nInput2)/2.0 );
	return 0;
}
/*/================================//
 p.117 - 04-01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int x = 0;
	scanf("%d", &x);

	//int / in 는 int이므로 소수점 이하는 버려지고 출력된다.
	printf("3으로 나눈 몫 : %d\n", x / 3);
	//몫은 버리고 나머지(int)만 출력한다.
	printf("3으로 나눈 나머지 : %d\n", x % 3);
	return 0;
}
/*/================================//
 p.117 - operator04.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int second = 0;
	scanf("%d", &second);

	printf("%d초는 %02d시간 %02d분 %02d초 입니다. ", second,
		second / 3600, (second % 3600) / 60, second % 60);
	return 0;
}
/*/================================//
 p.119 - 04-02.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int x = 0, nInput = 0;
	scanf("%d", &nInput);

	//nInput 변수에 저장된 사용자가 입력한 값을 x에 복사한다.
	//x에 들어있던 값은 Overwrite되고 사라진다.
	x = nInput;
	printf("%d\n", x);
	return 0;
}
/*/================================//
 p.120 - opassign01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {
	char szBuffer[32] = { 0 };

	//상수에 대입 연산을 수행할 수 없다. 
	3 = 4;
	//배열의 이름은 '주소상수'다. 변수가 아니다. 
	szBuffer = 'A';

	return 0;
}
/*/================================//
 p.121 - opassignconst01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {
	//nTemp는 '교환'을 위해 필요한 변수이다.
	int x = 10, y = 20, nTmp = 0;
	printf("Before: x(%d), y(%d)\n", x, y);

	//두 변수 x와 y에 저장된 값을 서로 교환한다. 
	nTmp = x;
	x = y;
	y = nTmp;

	//교환이 완료된 것을 확인하기 위해 출력한다.
	printf("After: x(%d), y(%d)", x, y);
	return 0;
}
/*/================================//
 p.123 - opswap1.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {
	int nResult = 0, nData = 10;

	nResult += 3; //nResult = nResult + 3;
	printf("%d\n", nResult);

	nResult *= nData;		//nResult = nResult * nData;
	printf("%d\n", nResult);

	nResult /= 2;			//nResult = nResult / 2;
	printf("%d\n", nResult);

	nResult -= nData - 5;	//nResult = nRessult -(nData - 5);
	printf("%d\n", nResult);

	nResult %= 3;			//nResult = nResult % 3 ;
	printf("%d\n", nResult);
	return 0;
}
/*/================================//
 p.126 - opcomassign01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {
	int x = 0, y = 0;

	x = y = 10;
	printf("%d, %d\n", x,y );
	return 0;
}
/*/================================//
 p.127 - opassign02.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {
	int nInput, nTotal;
	nTotal = 0;
	scanf_s("%d", &nInput);
	nTotal += nInput;
	scanf_s("%d", &nInput);
	nTotal += nInput;
	scanf_s("%d", &nInput);
	nTotal += nInput;

	printf("Total : %d\n", nTotal);
	return 0;
}
/*/================================//
 p.129 - 세 정수의 누적 및 출력
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {
	int x = 5;

	printf("%d\n", 5 / 2);			//int /int ->int
	printf("%f\n", 5.0 / 2);		// double / int -> double
	printf("%f\n", 5 / 2.0);		// int /double ->double
	printf("%f\n", (double)5 / 2);  // double / int -> double
	printf("%f\n", (double)x / 2);	// double / int -> double
	printf("%f\n", x / (double)2);	// int / double -> double
	printf("%f\n", (double)(x / 2));// double
	return 0;
}
/*/================================//
 p.131 - opcast01.c
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {
	int x = 10;

	//1. x에 저장된 값과 1을 더해 다시 x에 저장한다.
	x = x + 1;
	printf("%d\n", x);

	//2. x에 저장되어 있는 값에 1을 누산한다.
	x += 1;
	printf("%d\n", x);

	//3. x에 저장된 값을 1 증가시킨다.
	++x;
	printf("%d\n", x);

	return 0;
}
/*/================================//
 p.133 - opinc01.c 계수
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int x = 0, nResult = 0;

	//x의 값을 1 증가시킨 후 출력한다.
	++x;
	printf("%d\n", x);

	//x의 값을 1 증가시킨 후 출력한다.
	x++;
	printf("%d\n", x);

	//x의 값을 1 증가 시킨 후 단순 대입한다.(전위식 표기).
	nResult = ++x;
	printf("%d, %d\n", nResult, x);

	//x의 값을 nResult 에 대입한 후 x를 1 감소시킨다.(후위식 표기)
	nResult = x--;
	printf("%d, %d\n", nResult, x);

	return 0;
}
/*/================================//
 p.135 - opinc02.c 
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nData = 0x11223344;

	printf("%08X\n", nData & 0x00FFFF00);
	printf("%08X\n", nData | 0x2211FFFF);
	printf("%08X\n", nData ^ 0x2211FFFF);
	printf("%08X\n", ~nData  );
	printf("%08X\n", nData >> 8);
	printf("%08X\n", nData << 16);

	return 0;
}
/*/================================//
 p.136 - opbit01.c 비트 연산자의 사용
//================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nData = 0x11223344;

	printf("%08X\n", nData & 0xFFFF0000);
	printf("%08X\n", nData & 0x00FFFF00);
	printf("%08X\n", nData & 0x0000FFFF);
	printf("%08X\n", nData & 0xFF0000FF);

	return 0;
}
/*/================================//
 p.140 - opmask01.c	마스크 연산
//================================/*/

5. 연산자-응용
	5.1 sizeof 연산자
	5.2 관계 연산자
	5.3 논리 연산자
	5.3.1 논리합(OR)과 논리곱(AND)
	5.3.2 부정
	5.3.3 쇼트서킷
	5.4 조건 연산자(삼항 연산자)
	5.4.1 최댓값 구하기
	5.4.2 최댓값 구하기 방식 비교

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nData = 10;

	//sizeof 연산자의 피연산자는 자료형이다.
	printf("%d, %d, %d\n", sizeof(5), sizeof(nData), sizeof(int));
	printf("%d, %d\n", sizeof('A'), sizeof(char));
	printf("%d, %d\n", sizeof(123.45F), sizeof(123.45));

	//연산식 결괏값의 자료형의 크기를 측정한다.
	printf("%d, %d\n", sizeof(nData + 10), sizeof(++nData));
	printf("%d\n", nData);
	return 0;
}
/*=================================
 p.149 - opsizeof01.c sizeof 연산자
==================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	printf("%d\n", 300 == 299.99999f);
	printf("%d\n", 300 == 299.99999);
	
	printf("%d\n", 300 == 299.9999);
	printf("%d\n", 300 == 300.00001F);
	return 0;
}
/*=================================
 p.153 - oprelintfloat01.c 
 http://www.freshsources.com/FPNotReal.pdf
==================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nInput = 0, bResult = 0;

	scanf("%d", &nInput);
	bResult = nInput < 4 || nInput >= 60;
	printf("Result : %d (1:True, 0:False)\n", bResult);

	return 0;
}
/*================================================
 p.155 - oplogical01.c 논리합(OR)과 논리곱(AND)
==================================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nInput = 0, bResult = 0;

	scanf("%d", &nInput);
	bResult = nInput > 3 && nInput < 20;
	printf("Result : %d (1:True, 0:False)\n", bResult);

	return 0;
}
/*================================================
 p.157 - oplogical02.c  논리곱(AND)
==================================================/*/

#include<stdio.h>
#pragma warning (disable: 4996) 

int main(void) {

	int nInput = 0, bResult = 0;

	scanf("%d", &nInput);
	bResult =  3 < nInput < 20;
	printf("Result : %d (1:True, 0:False)\n", bResult);

	return 0;
}
/*================================================
 p.158 - oplogicalerror01.c  
==================================================/*/


